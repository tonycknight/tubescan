name: Build & Release

on:
  push:
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  build-version-number: 0.2.${{ github.run_number }}  
  docker-image-name: ghcr.io/tonycknight/tubescan:v0.2.${{ github.run_number }}
  
jobs:
  sca:
    uses: ./.github/workflows/sca.yml

  check-style:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v4
                
      - name: Restore packages
        run: |
          dotnet tool restore
          dotnet restore

      - name: Check Style
        run: dotnet format --verify-no-changes

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v4
                
      - name: Restore packages
        run: |
          dotnet tool restore
          dotnet restore
      
      - name: Unit tests
        run: dotnet test -c Debug --logger "trx;LogFileName=test_results.trx" /p:CollectCoverage=true /p:CoverletOutput=./TestResults/coverage.info /p:CoverletOutputFormat=cobertura

      - name: Consolidate coverage
        run: dotnet reportgenerator -reports:'./tests/**/coverage.info' -reporttypes:'html' -targetdir:'./publish/codecoverage'

      - name: Archive Test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: tests.results
          path: |
            ./tests/**/TestResults/*
            
      - name: Archive Code coverage
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: codecoverage
          path: ./publish/codecoverage/*.*
          
      - name: Unit test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: unit test results
          path: ${{ github.workspace }}/tests/TubeScan.Tests/TestResults/test_results.trx
          reporter: dotnet-trx
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Code coverage results
        uses: 5monkeys/cobertura-action@master
        if: always()
        with:
          path: ${{ github.workspace }}/tests/TubeScan.Tests/TestResults/coverage.info
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          minimum_coverage: 70
          fail_below_threshold: false
          show_line: true
          show_branch: true
          show_missing: true
          show_class_names: true
          link_missing_lines: true
          report_name: code coverage results

  stryker:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v4
        
      - name: Restore packages
        run: |
          dotnet tool restore
          dotnet restore
              
      - name: Run Mutation testing
        run: dotnet dotnet-stryker

      - name: Archive Stryker results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: stryker.results
          path: |
            ./StrykerOutput/**/reports/* 
      
  codeql:
    uses: ./.github/workflows/codeql-analysis.yml

  build-docker-image:
    runs-on: ubuntu-latest
    needs:   [ check-style, unit-tests, sca, codeql, stryker ]

    steps:
      - uses: actions/checkout@v4

      - name: Set Preview Docker image name
        if: ${{ github.ref != 'refs/heads/main' }}
        run: |
          echo "docker-image-name=${{ env.docker-image-name }}-preview" >> $GITHUB_ENV
        
      - name: Build docker image
        run: docker build -t ${{ env.docker-image-name }} --build-arg BuildVersion=${{ env.build-version-number }} .

      - name: Login to GitHub Container Registry
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR }}

      - name: Push docker image
        if: ${{ github.event_name != 'pull_request' }}
        run: docker push ${{ env.docker-image-name }}

  create-gh-release:
    runs-on: ubuntu-latest
    needs: [ build-docker-image ]    
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:    
      - uses: actions/checkout@v4

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: v${{ env.build-version-number }}
          prerelease: true
          generateReleaseNotes: true

